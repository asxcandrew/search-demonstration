The License Zero Manifesto
sustainable software in the open
This piece also appears on Medium and licensezero.com.
Brokenness
Open Source is a shopping spree. Open Source is code with friends on the Web. Open Source is a list of magic licenses.
Everybody loves Open Source. Free, friends, and magic: what could possibly go wrong?
On the making side, as a maintainer in the last few years, you feel for yourself what’s wrong. Open Source won business over, and now business can’t get enough at the price. The bug reports, the feature requests, the diplomacy, the time it takes to do things right with current tools, have run down, burned out, and busted some of the best. The more you care about quality software, the more you care about community, the more generous bones in your body, the greater the risk that you’ll give out at some point, too. And perversely, the more people will ask, expect, and even demand more from you.
That’s wrong. Something’s broken.
Tension
We code with friends on the Web for fun, to hone our craft, to scratch our itches, to chase beautiful ideas. But more and more of our growing community isn’t playing for joy. They’re playing to win. They’re playing other games.
Open Source has always welcomed those uses, too. But when the take is constant, and the give only occasional, what once was joyous can feel like thankless work. There are more and more of you handing out code every day, but you’re increasingly outnumbered all the same, and the community adopts more and more the character of its majority.
We talk about the consequences as “sustainability” problems. Sustainability is abstract; casualties aren’t. If you can’t help caring about elegance in software, if you won’t give up coding in the open, if you can’t count on winning the Open Source dream-job lottery, or thriving in corporate conditions if you do, you need support to avoid harm to yourself and the integrity of your craft. You need recognition, help, and material aid from those who rely on your work and take your time. There’s no good reason independent craft and life-sustaining software success shouldn’t go hand-in-hand.
Emptyhandedness
Unfortunately, neither Open Source generally, nor Free Software specifically, helps here. Open Source licenses override legal defaults that make using and sharing software difficult and risky. They’re handy, reliable, specialized tools for disarming the heavy weapons that copyright and other laws hand out to individual developers, want them or not. But neither Open Source licenses nor Open Source tooling tell you how or why to make time to write software in the first place. They don’t tell you how to stay sane, or pay rent, so that you can write still more, or maintain what you’ve already made. Even if there’s clear need. So Open Source licenses make amazing tools of selfless, total generosity, if you come from a situation free of worldly concern, and that’s giving you can afford. If you feel like every day is someone else’s birthday, and being generous is becoming expensive, that’s Open Source at scale. Not a bug.
Try to make money, or just finance time to contribute where you see a need, and effectively free-of-charge under Open Source terms doesn’t leave you much leverage. The most valuable thing you have to offer, your software, is pegged down at $0. So you join the Mendicant Order of Maintainerati. Maybe mull a few Open Source business models, like proprietary add-ons, support, hosted services, and training. But even fewer users donate than contribute back, and all the business models are second-rate. Open Source severs the link between good software and good software business, and the two veer off naturally in different directions. At worst, Open Source business models incentivize worse software. Since you can’t charge more for better software, and you need to charge for something, you take time you’d rather spend bettering software, and make the best of an inherently flawed business plan, instead.